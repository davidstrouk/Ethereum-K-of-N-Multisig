//-------------------------- KofNMultisig TEST FUNCTIONS -------------------
  function getN()
  public
  view
  returns (uint)
  {
    return N;
  }

  /**
  @notice Get K
  @return {
    "K": "Number of arequired pprovals"
  }
  */
  function getK()
  public
  view
  returns (uint)
  {
    return K;
  }

  /**
  @notice Get user wallet
  @param userAddress The address of the user
  @return {
    "wallet": "The wallet address of the user"
  }
  */
  function getUserWallet(address userAddress)
  public
  view
  returns (address)
  {
    return usersInGroup[userAddress].wallet;
  }

  /**
  @notice Get user in group
  @param userAddress The address of the user
  @return {
    "inGroup": "True if the user belongs to the group, Flase otherwise"
  }
  */
  function getUserInGroup(address userAddress)
  public
  view
  returns (bool)
  {
    return usersInGroup[userAddress].inGroup;
  }

  /**
  @notice Get user challenged
  @param userAddress The address of the user
  @return {
    "inGroup": "True if the user is the challnge's target, Flase otherwise"
  }
  */
  function getUserChallenged(address userAddress)
  public
  view
  returns (bool)
  {
    return usersInGroup[userAddress].challenged;
  }

  /**
  @notice Get user last challenge block
  @param userAddress The address of the user
  @return {
    "lastChallengeBlock": "The last block this user published a challenge"
  }
  */
  function getUserLastChallengeBlock(address userAddress)
  public
  view
  returns (uint)
  {
  	return usersInGroup[userAddress].lastChallengeBlock;
  }

  /**
  @notice Get challenge is active
  @return {
    "isActive": "True if there is an active challenge, False otherwise"
  }
  */
  function getChallengeIsActive()
  public
  view
  returns (bool)
  {
  	return challenge.isActive;
  }

  /**
  @notice Get challenge's sender
  @return {
    "sender": "The challenge's sender"
  }
  */
  function getChallengeSender()
  public
  view
  returns (address)
  {
    return challenge.sender;
  }

  /**
  @notice Get challenge's target
  @return {
    "target": "The target of the challenge"
  }
  */
  function getChallengeTarget()
  public
  view
  returns (address)
  {
  	return challenge.target;
  }

  /**
  @notice Get challenge start block
  @return {
    "startBlock": "The block that the challenge was published on"
  }
  */
  function getChallengeStartBlock()
  public
  view
  returns (uint)
  {
    return challenge.startBlock;
  }

  /**
  @notice Get transaction reciever
  @param txId The transaction Id
  @return {
    "receiver": "The address of the transaction destination"
  }
  */
  function getTransactionReceiver(uint txId)
  public
  view
  returns (address)
  {
  	return ledger[txId].receiver;
  }

  /**
  @notice Get transaction amount to transfer
  @param txId The transaction Id
  @return {
    "amountToTransfer": "The requested amount of the transaction"
  }
  */
  function getTransactionAmountToTransfer(uint txId)
  public
  view
  returns (uint)
  {
  	return ledger[txId].amountToTransfer;
  }

  /**
  @notice Get transaction count
  @param txId The transaction Id
  @return {
    "count": "Number of approvals of the transaction"
  }
  */
  function getTransactionCount(uint txId)
  public
  view
  returns (uint)
  {
  	return ledger[txId].count;
  }

  /**
  @notice Get transaction user approve
  @param txId The transaction Id
  @param userAddress The address of the user
  @return {
    "userApprove": "True if the user approved txId transaction, False otherwise"
  }
  */
  function getTransactionUsersApprove(uint txId, address userAddress)
  public
  view
  returns (bool)
  {
  	return ledger[txId].usersApproves[userAddress];
  }

  /**
  @notice Get penalty wallet
  @return {
    "penaltyWallet": "The address of the penalty wallet"
  }
  */
  function getPenaltyWallet()
  public
  pure
  returns (address)
  {
  	return penaltyWallet;
  }

  /**
  @notice Get number of transactions
  @return {
    "numberOfTransactions": "The number of the requested transactions"
  }
  */
  function getNumberOfTransactions()
  public
  view
  returns (uint)
  {
  	return numberOfTransactions;
  }

  /**
  @notice Get balance
  @return {
    "balance": "The balance of the contract wallet"
  }
  */
  function getBalance()
  public
  view
  returns (uint)
  {
    return address(this).balance;
  }

  /**
  @notice Get address
  @return {
    "address": "The address of the contract"
  }
  */
  function getAddress()
  public
  view
  returns (address)
  {
    return address(this);
  }
